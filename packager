#!/usr/bin/env php
<?php

require dirname(__FILE__) . '/packager.php';

$executable = array_shift($argv);
$command = array_shift($argv);

if ($argv[0] == '-h' || $argv[0] == '--help') {
	usage($command);
	exit;
}

$home = exec('echo $HOME');

$packages = YAML::decode_file("$home/.packages.yml");
if (empty($packages)) $packages = array();

switch ($command){
	
	case 'register':

		$folder = array_shift($argv);
		$pkg = new Packager($folder);
		$name = $pkg->get_package_name();
		$path = $pkg->get_package_manifest();
		
		$packages[$name] = $path;
		
		file_put_contents("$home/.packages.yml", YAML::encode($packages));
		
		Packager::warn("the package $name has been registered as $path\n");

	break;
	
	case 'unregister':
	
		$name = array_shift($argv);
		
		if (empty($packages[$name])){
			Packager::warn("there is no package called $name\n");
			break;
		}

		unset($packages[$name]);
	
		file_put_contents("$home/.packages.yml", YAML::encode($packages));
	
		Packager::warn("the package $name has been unregistered\n");
	
	break;
	
	case 'list':
	
		foreach ($packages as $name => $path) Packager::warn("$name: $path\n");
		
	break;
	
	case 'build':

		$selected = array(
			'components' => array(),
			'files' => array(),
			'add-packages' => array(),
			'remove-packages' => array(),
			'blocks' => array(),
			'use-only' => null
		);
		
		$build = 'components';
		
		foreach ($argv as $arg){

			if ($arg == '+packages'){
				$build = 'add-packages';
				continue;
			}
			
			if ($arg == '-blocks'){
				$build = 'blocks';
				continue;
			}
			
			if ($arg == '+use-only'){
				$build = 'use-only';
				if ($selected['use-only'] == null) $selected['use-only'] = array();
				continue;
			}
			
			if ($arg == '-packages'){
				$build = 'remove-packages';
				continue;
			}
			
			if ($arg == '+components'){
				$build = 'components';
				continue;
			}
			
			if ($arg == '+files'){
				$build = 'files';
				continue;
			}

			$selected[$build][] = $arg;
		}
		
		$paths = array();
					
		foreach ($packages as $name => $path){
			if (!$selected['use-only'] || array_contains($selected['use-only'], $name)) $paths[] = $path;
		}
		
		$pkg = new Packager($paths);
		
		foreach ($selected['add-packages'] as $package_path) $pkg->add_package($package_path);
		foreach ($selected['remove-packages'] as $package_name) $pkg->remove_package($package_name);
		
		$re = "/^([^\/]+)\/\*$/";
		$wildcards = array();
		
		$files = $selected['files'];
		$components = $selected['components'];
		$blocks = $selected['blocks'];
		
		foreach ($components as $component){
			preg_match($re, $component, $matches);
			if (!empty($matches)){
				array_erase($components, $component);
				array_include($wildcards, $matches[1]);
			}
		}
		
		foreach ($files as $file){
			preg_match($re, $file, $matches);
			if (!empty($matches)){
				array_erase($files, $file);
				array_include($wildcards, $matches[1]);
			}
		}
		
		$pkg->validate($files, $components, $wildcards);
		
		foreach ($components as $component){
			$file = $pkg->component_to_file($component);
			if ($file) array_include($files, $file);
		}
		
		foreach ($wildcards as $package){
			$all = $pkg->get_all_files($package);
			foreach ($all as $file) array_include($files, $file);
		}
		
		$files = $pkg->complete_files($files);
		
		Packager::warn("Build using: " . implode(', ', $pkg->get_packages()) . "\n");
		
		Packager::warn("Included Files/Components:\n");
		
		foreach ($files as $file){
			$file_name = $pkg->get_file_name($file);
			$file_package = $pkg->get_file_package($file);
			Packager::warn("- $file_package/$file_name: [" . implode(", ", $pkg->get_file_provides($file)) . "]\n");
		}
		
		echo $pkg->build($files, array(), array(), $blocks);
	
	break;
	
	case 'help':
	case '-h':
	case '--help':
		usage(array_shift($argv));
	break;
	
	default:
		usage();
		exit(1);
	
}

function usage($command = '') {
	switch ($command){
		case 'register':
			echo "Usage: packager register <dir>|<manifest>

register arguments:
  <dir>      Directory in which the package resides. In this case
             <dir>/package.yml will be used as manifest.
  <manifest> Manifest file to use. In this case the directory in which the
             manifest file resides will be used as package directory.
";
		break;

		case 'unregister':
			echo "Usage: packager unregister <package>

unregister arguments:
  <package> Name of the package as specified in its manifest.
";
		break;

		case 'list':
			echo "Usage: packager list

list:
  Lists your registered packages, as found in ~/.packages.yml.
";
		break;

		case 'build':
			echo "Usage: packager build <components> [args...]
       packager build <args...>

build arguments:
  <components>
  +components <components> Build passed in components and their dependancies
                           using your registered packages.
  +files <files>           Build passed in files and their dependancies
                           using your registered packages.
  +packages <directories>  Use unregistered packages residing in the passed
                           in directories in addition to the registered
                           packages.
  -packages <packages>     Don't use passed in packages. This lets you build
                           components without dependancies.
  +use-only <packages>     Use only the passed in packages. This lets you
                           build components without dependancies.
  -blocks <blocks>         Exclude optional blocks from the sources of the
                           components you're building.
";
		break;

		case 'help':
			echo "Usage: packager help <command>

packager commands:
  help       Show help about a specific command.
  register   Register a new package.
  unregister Unregister a package.
  list       List registered packages.
  build      Build your concatenated file.
";
		break;

		default:
			echo "Usage: packager help <command>
       packager register <dir>|<manifest>
       packager unregister <package>
       packager list
       packager build <components> [args...]
       packager build <args...>

See 'packager help <command>' for information on a specific command.

packager commands:
  help       Show help on a specific command.
  register   Register a new package.
  unregister Unregister a package.
  list       List registered packages.
  build      Build your concatenated file.
";
	}
}

?>
