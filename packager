#!/usr/bin/env php

<?php

require __DIR__ . '/packager.php';

$executable = array_shift($argv);
$command = array_shift($argv);

function out($message){
	$std_err = fopen('php://stderr', 'w');
	fwrite($std_err, "$message\n");
	fclose($std_err);
}

$user = exec("whoami");

$packages = YAML::decode_file("/Users/$user/.packages.yml");
if (empty($packages)) $packages = array();

switch ($command){
	
	case 'register':

		$folder = array_shift($argv);
		$pkg = new Packager($folder);
		$name = $pkg->get_package_name();
		$path = $pkg->get_package_path();
		
		$packages[$name] = $path;
		
		file_put_contents("/Users/$user/.packages.yml", YAML::encode($packages));
		
		out("the package $name has been registered as $path\n");

	break;
	
	case 'unregister':
	
		$name = array_shift($argv);
		
		if (empty($packages[$name])){
			out("there is no package called $name\n");
			break;
		}

		unset($packages[$name]);
	
		file_put_contents('/Users/kamicane/.packages.yml', YAML::encode($packages));
	
		out("the package $name has been unregistered\n");
	
	break;
	
	case 'list':
	
		foreach ($packages as $name => $path) out("$name: $path");
		out("");
		
	break;
	
	case 'build':

		$selected = array('components' => array(), 'files' => array(), 'add-packages' => array(), 'remove-packages' => array(), 'with' => array());
		
		$build = 'components';
		
		foreach ($argv as $arg){

			if ($arg == '+packages'){
				$build = 'add-packages';
				continue;
			}
			
			if ($arg == '-packages'){
				$build = 'remove-packages';
				continue;
			}
			
			if ($arg == '+components'){
				$build = 'components';
				continue;
			}
			
			if ($arg == '+files'){
				$build = 'files';
				continue;
			}

			$selected[$build][] = $arg;
		}
		
		$paths = array();
			
		foreach ($packages as $name => $path){
			$paths[] = $path;
		}
		
		$pkg = new Packager($paths);
		
		foreach ($selected['add-packages'] as $package_path) $pkg->add_package($package_path);
		foreach ($selected['remove-packages'] as $package_name) $pkg->remove_package($package_name);
		
		$files = array_merge($pkg->components_to_files($selected['components']), $selected['files']);
		
		$re = "/^([\w-]+)\/\*$/";
		$wildcards = array();
		
		foreach ($selected['components'] as $component){
			preg_match($re, $component, $matches);
			if (!empty($matches)) array_include($wildcards, $matches[1]);
		}
		
		foreach ($selected['files'] as $file){
			preg_match($re, $file, $matches);
			if (!empty($matches)) array_include($wildcards, $matches[1]);
		}
		
		foreach ($wildcards as $package){
			$files = array_merge($files, $pkg->get_all_files($package));
		}
		
		out("Build using: " . implode(', ', $pkg->get_packages()));
		
		out("Included Files/Components:");
		
		foreach ($files as $file){
			$name = $pkg->get_file_name($file);
			out("- $name: [" . implode(", ", $pkg->get_file_provides($file)) . "]");
		}
		
		out('');
		
		echo $pkg->build_from_files($files);
	
	break;
	
}

?>
